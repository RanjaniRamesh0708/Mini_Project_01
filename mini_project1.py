# -*- coding: utf-8 -*-
"""Mini_Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gQGKFnYW531aSkSOEThWRTXv6Ixa8tZC
"""

api_key="pSkxtrhuACyq0C94X4ccYlDiktflE8apWoWIdiDl"

url=f"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-07&api_key={api_key}"

import requests

response=requests.get(url)
response

data=response.json()

data

import requests
from datetime import datetime
asteroids = []
target = 10000
url  = f"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-08&api_key={api_key}"

while len(asteroids) < target:
  response = requests.get(url)
  data = response.json()
  details = data['near_earth_objects']
  for date, asteroids_details in details.items():
    for ast in asteroids_details:
      asteroids.append(dict(
          id = int(ast['id']),
          name = ast['name'],
          neo_reference_id = int(ast['neo_reference_id']),
          absolute_magnitude_h = float(ast['absolute_magnitude_h']),
          estimated_dia_man_km = float(ast['estimated_diameter']['kilometers']['estimated_diameter_max']),
          is_potentially_hazardous_asteroid = ast['is_potentially_hazardous_asteroid'],
          close_approach_date = ast['close_approach_data'][0]['close_approach_date'],
          relative_velocity_kmph= float(ast['close_approach_data'][0]['relative_velocity']['kilometers_per_hour']),
          astronomical_distance = float(ast['close_approach_data'][0]['miss_distance']['astronomical']),
          miss_distance_km = float(ast['close_approach_data'][0]['miss_distance']['kilometers']),
          miss_distance_lunar = float(ast['close_approach_data'][0]['miss_distance']['lunar']),
          orbiting_body = ast['close_approach_data'][0]['orbiting_body'],
          estimated_dia_min = float(ast['estimated_diameter']['kilometers']['estimated_diameter_min'])))

      if len(asteroids) >= target:
        break
    if len(asteroids) >= target:
      break
  url = data['links']['next']

asteroids

import sqlite3

conn = sqlite3.connect('mydb.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE asteroids (
                    id INTEGER,
                    name varchar2(100),
                    absolute_magnitude_h float,
                    estimated_diameter_min_km float,
                    estimated_diameter_max_km float,
                    is_potentially_hazardous_asteroid boolean
                )''')

cursor.execute('select * from asteroids')

import pandas as pd

 # sample dataframe

data = asteroids
df = pd.DataFrame(data)
df

insert = "insert into asteroids values(?,?,?,?,?,?)"

for i in asteroids:
 values = (i["id"],i['name'],
           i['absolute_magnitude_h'],
           i['estimated_dia_man_km'],
           i['estimated_dia_min'],
           i['is_potentially_hazardous_asteroid'])
 cursor.execute(insert,values)
conn.commit()

cursor.execute("SELECT * FROM asteroids")

rows = cursor.fetchall()

for i in rows:
    print(i)

cursor.execute('''CREATE TABLE close_approach (
                    neo_reference_id INTEGER,
                    close_approach_date date,
                    relative_velocity_kmph float,
                    astronomical float,
                    miss_distance_km float,
                    miss_distance_lunar float,
                    orbiting_body varchar2(100)
                )''')

insert1 = "insert into close_approach values(?,?,?,?,?,?,?)"

for j in asteroids:
 values1 = (j["neo_reference_id"],j['close_approach_date'],
           j['relative_velocity_kmph'],
           j['astronomical_distance'],
           j['miss_distance_km'],
           j['miss_distance_lunar'],
           j['orbiting_body'])
 cursor.execute(insert1,values1)
conn.commit()

#cursor.execute("SELECT * FROM close_approach")
cursor.execute("SELECT * FROM asteroids")
rec = cursor.fetchall()

for j in rec:
    print(j)

"""1.Count how many times each asteroid has approached Earth"""

cursor.execute('''SELECT name,count(orbiting_body) FROM asteroids ,close_approach
where id=neo_reference_id
and orbiting_body="Earth"
group by id''')
rec = cursor.fetchall()

for j in rec:
    print(j)

"""2.Average velocity of each asteroid over multiple approaches"""

import pandas as pd
cursor.execute('''SELECT name,avg(distinct relative_velocity_kmph) FROM asteroids ,close_approach
where id=neo_reference_id
group by id''')
rec = cursor.fetchall()

#for j in rec:
  #  print(j)

data = rec
df = pd.DataFrame(data)
df

"""3.List top 10 fastest asteroids"""

import pandas as pd
cursor.execute('''select * from (SELECT name,relative_velocity_kmph,dense_rank()over(order by relative_velocity_kmph desc) rk FROM asteroids ,close_approach
where id=neo_reference_id)where rk<=10''')
rec = cursor.fetchall()

#for j in rec:
  #  print(j)

data = rec
df = pd.DataFrame(data)
df

"""4.Find potentially hazardous asteroids that have approached Earth more than 3 times

"""

import pandas
cursor.execute('''SELECT name,count(is_potentially_hazardous_asteroid) FROM asteroids ,close_approach
where id=neo_reference_id
and orbiting_body="Earth"
and is_potentially_hazardous_asteroid=1
group by id
having count(is_potentially_hazardous_asteroid)>3''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""5.Find the month with the most asteroid approaches"""

import pandas
cursor.execute('''select * from (SELECT count(DISTINCT name) cnt,close_approach_date FROM asteroids ,close_approach
where id=neo_reference_id
group by close_approach_date)
order by cnt desc
limit 1''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""6.Get the asteroid with the fastest ever approach speed"""

import pandas
cursor.execute('''SELECT name,max(relative_velocity_kmph) FROM asteroids ,close_approach
where id=neo_reference_id''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""7.Sort asteroids by maximum estimated diameter (descending)"""

import pandas
cursor.execute('''SELECT a.* FROM asteroids a ,close_approach
where id=neo_reference_id
order by estimated_diameter_min_km desc''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""9.Display the name of each asteroid along with the date and miss distance of its closest approach to Earth."""

import pandas
cursor.execute('''SELECT name,close_approach_date,miss_distance_km FROM asteroids ,close_approach
where id=neo_reference_id
and orbiting_body="Earth"''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""10.List names of asteroids that approached Earth with velocity > 50,000 km/h"""

import pandas
cursor.execute('''SELECT name,relative_velocity_kmph FROM asteroids ,close_approach
where id=neo_reference_id
and orbiting_body="Earth"
and relative_velocity_kmph>50000''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""11.Count how many approaches happened per month"""

import pandas
cursor.execute('''SELECT count(DISTINCT name),strftime('%m',close_approach_date) FROM asteroids ,close_approach
where id=neo_reference_id
group by strftime('%m',close_approach_date)''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""12.Find asteroid with the highest brightness (lowest magnitude value)"""

import pandas
cursor.execute('''SELECT name,min(absolute_magnitude_h) FROM asteroids ,close_approach
where id=neo_reference_id''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""13.Get number of hazardous vs non-hazardous asteroids"""

import pandas
cursor.execute('''SELECT count(DISTINCT name),"Non-hazardous asteroids" FROM asteroids ,close_approach
where id=neo_reference_id
and is_potentially_hazardous_asteroid=0
union
SELECT count( DISTINCT name),"Hazardous asteroids" FROM asteroids ,close_approach
where id=neo_reference_id
and is_potentially_hazardous_asteroid=1''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""14.Find asteroids that passed closer than the Moon (lesser than 1 LD), along with their close approach date and distance."""

import pandas
cursor.execute('''SELECT name,close_approach_date,miss_distance_lunar FROM asteroids ,close_approach
where id=neo_reference_id
and miss_distance_lunar<1''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""15.Find asteroids that came within 0.05 AU(astronomical distance)"""

import pandas
cursor.execute('''SELECT name,astronomical FROM asteroids ,close_approach
where id=neo_reference_id
and astronomical<0.05''')
rec = cursor.fetchall()

dataset=rec
ds=pd.DataFrame(dataset)
ds

"""Streamlit"""

!pip install streamlit

!pip install streamlit-option-menu

!wget -q -O - ipv4.icanhazip.com

! streamlit run nasa_streamlit.py & npx localtunnel --port 8501

!pip install streamlit pyngrok

# Commented out IPython magic to ensure Python compatibility.
# # 2. Write the app.py file
# %%writefile asteroid.py
# import streamlit as st
# import sqlite3
# import pandas as pd
# from datetime import date
# import matplotlib.pyplot as plt
# 
# # ---------------- DB ----------------
# conn = sqlite3.connect("mydb.db")
# 
# # ---------------- App ----------------
# st.set_page_config(page_title="NASA Asteroid Tracker", layout="wide")
# 
# # ---------------- Sidebar CSS (Lucide styling for radio) ----------------
# st.sidebar.markdown(
#     """
#     <style>
#     /* Sidebar title */
#     .sidebar-title{
#         font-size:20px;font-weight:700;margin-bottom:14px;display:flex;align-items:center;color:white
#     }
#     .sidebar-title svg{width:22px;height:22px;margin-right:8px}
# 
#     /* Make radio look like our menu cards */
#     .stRadio > div{display:flex;flex-direction:column;gap:10px}
#     .stRadio [role="radiogroup"] > label{
#         border:1px solid #444;border-radius:10px;padding:12px 14px;
#         color:white;background:transparent;display:flex;align-items:center;
#         gap:10px;cursor:pointer;transition:.15s ease-in-out
#     }
#     .stRadio [role="radiogroup"] > label:hover{background:#ff4d4d;color:white}
#     .stRadio [role="radiogroup"] > label p{margin:0;font-weight:600}
# 
#     /* Hide default dot; keep the whole card clickable */
#     .stRadio [role="radiogroup"] > label > div:first-child{display:none}
# 
#     /* Active (checked) state */
#     .stRadio [role="radiogroup"] > label:has(input:checked){
#         background:#ff4d4d;color:white;border-color:#ff4d4d;
#     }
# 
#     /* Lucide icons for each radio option via CSS ::before */
#     .stRadio [role="radiogroup"] > label::before{
#         content:"";width:20px;height:20px;display:inline-block;
#         background-repeat:no-repeat;background-position:center;background-size:contain;
#         filter:invert(1); /* keep icons white on dark sidebar */
#     }
#     /* 1st item = app-window */
#     .stRadio [role="radiogroup"] > label:nth-of-type(1)::before{
#         background-image:url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='white' stroke-width='2' viewBox='0 0 24 24'><rect x='3' y='4' width='18' height='16' rx='2'/><path d='M3 8h18'/></svg>");
#     }
#     /* 2nd item = sheet */
#     .stRadio [role="radiogroup"] > label:nth-of-type(2)::before{
#         background-image:url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='white' stroke-width='2' viewBox='0 0 24 24'><rect x='3' y='4' width='18' height='16' rx='2'/><path d='M7 8h10M7 12h10M7 16h10'/></svg>");
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )
# 
# # ---------------- Sidebar Title (Lucide: laptop-minimal) ----------------
# st.sidebar.markdown(
#     """
#     <div class='sidebar-title'>
#       <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor"
#            stroke-width="2" viewBox="0 0 24 24">
#         <rect x="3" y="4" width="18" height="12" rx="2"></rect>
#         <path d="M2 20h20"></path>
#       </svg>
#       Asteroid Approaches
#     </div>
#     """,
#     unsafe_allow_html=True
# )
# 
# # ---------------- Sidebar Menu (works!) ----------------
# options = ["Filter Criteria", "Queries"]
# # preserve previous selection if present
# default_idx = 0 if st.session_state.get("active_page", "Filter Criteria") == "Filter Criteria" else 1
# menu = st.sidebar.radio("Menu", options, index=default_idx, label_visibility="collapsed")
# st.session_state.active_page = menu
# 
# # ---------------- Title ----------------
# st.markdown("<h1 style='text-align:center'>🚀 NASA Asteroid Tracker 🪐</h1>", unsafe_allow_html=True)
# 
# # ---------- Data helper ----------
# @st.cache_data
# def load_data():
#     df = pd.read_sql("""
#         SELECT *
#         FROM asteroids
#         JOIN close_approach ON asteroids.id = close_approach.neo_reference_id
#     """, conn)
#     for c in df.columns:
#         if pd.api.types.is_numeric_dtype(df[c]): df[c] = df[c].fillna(0)
#         else: df[c] = df[c].fillna("")
#     df = df.convert_dtypes()
#     for c in df.columns:
#         if pd.api.types.is_integer_dtype(df[c]): df[c] = df[c].astype("int64", errors="ignore")
#         elif pd.api.types.is_float_dtype(df[c]): df[c] = df[c].astype("float64", errors="ignore")
#         else: df[c] = df[c].astype(str)
#     return df
# 
# # ---------------- Pages ----------------
# if menu == "Filter Criteria":
#     df_all = load_data()
#     filters = {}
# 
# 
#     # Row 1
#     c1, c2, c3 = st.columns([1,1,1], gap="medium")
#     with c1:
#         if "absolute_magnitude_h" in df_all.columns:
#             lo, hi = float(df_all["absolute_magnitude_h"].min()), float(df_all["absolute_magnitude_h"].max())
#             filters["absolute_magnitude_h"] = st.slider("Min Magnitude", lo, hi, (lo, hi), key="mag")
#     with c2:
#         if "relative_velocity_kmph" in df_all.columns:
#             lo, hi = float(df_all["relative_velocity_kmph"].min()), float(df_all["relative_velocity_kmph"].max())
#             filters["relative_velocity_kmph"] = st.slider("Relative Velocity (kmph)", lo, hi, (lo, hi), key="vel")
#     with c3:
#         start_date = st.date_input("Start Date", date(2024, 1, 1), key="start_date")
# 
#     # Row 2
#     c4, c5, c6 = st.columns([1,1,1], gap="medium")
#     with c4:
#         if "estimated_diameter_min_km" in df_all.columns:
#             lo, hi = float(df_all["estimated_diameter_min_km"].min()), float(df_all["estimated_diameter_min_km"].max())
#             filters["estimated_diameter_min_km"] = st.slider("Min Estimated Diameter (km)", lo, hi, (lo, hi), key="diam_min")
#     with c5:
#         if "astronomical" in df_all.columns:
#             lo, hi = float(df_all["astronomical"].min()), float(df_all["astronomical"].max())
#             filters["astronomical"] = st.slider("Astronomical Unit", lo, hi, (lo, hi), key="au")
#     with c6:
#         end_date = st.date_input("End Date", date(2025, 12, 31), key="end_date")
# 
#     # Row 3
#     c7, c8 = st.columns([2,1], gap="medium")
#     with c7:
#         if "estimated_diameter_max_km" in df_all.columns:
#             lo, hi = float(df_all["estimated_diameter_max_km"].min()), float(df_all["estimated_diameter_max_km"].max())
#             filters["estimated_diameter_max_km"] = st.slider("Max Estimated Diameter (km)", lo, hi, (lo, hi), key="diam_max")
#     with c8:
#         hazardous = st.selectbox("Potentially Hazardous", ["All", "Yes", "No"], key="hazard")
# 
#     st.markdown("<br>", unsafe_allow_html=True)
# 
#     if st.button("Filter", use_container_width=True):
#         q = """
#             SELECT *
#             FROM asteroids
#             JOIN close_approach ON asteroids.id = close_approach.neo_reference_id
#             WHERE 1=1
#         """
#         for col, (lo, hi) in filters.items():
#             q += f" AND {col} BETWEEN {lo} AND {hi}"
#         q += f" AND close_approach_date BETWEEN '{start_date}' AND '{end_date}'"
#         if hazardous == "Yes":
#             q += " AND is_potentially_hazardous_asteroid = 1"
#         elif hazardous == "No":
#             q += " AND is_potentially_hazardous_asteroid = 0"
# 
#         df = pd.read_sql(q, conn)
#         for c in df.columns:
#             if pd.api.types.is_numeric_dtype(df[c]): df[c] = df[c].fillna(0)
#             else: df[c] = df[c].fillna("")
#         df = df.convert_dtypes()
#         for c in df.columns:
#             if pd.api.types.is_integer_dtype(df[c]): df[c] = df[c].astype("int64", errors="ignore")
#             elif pd.api.types.is_float_dtype(df[c]): df[c] = df[c].astype("float64", errors="ignore")
#             else: df[c] = df[c].astype(str)
# 
#         st.subheader("📊 Filtered Asteroids")
#         if df.empty:
#             st.warning("⚠️ No asteroids found with the selected filters.")
#         else:
#             st.dataframe(df, width=1400)
# 
# 
# else:  # Queries
#     queries = {
#         "Count how many times each asteroid has approached Earth": """
#             SELECT name, count(orbiting_body) as approaches
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id AND orbiting_body="Earth"
#             GROUP BY id
#         """,
# 
#         "Average velocity of each asteroid over multiple approaches": """
#             SELECT name, avg(DISTINCT relative_velocity_kmph) as avg_velocity
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#             GROUP BY id
#         """,
# 
#         "Top 10 fastest asteroids": """
#             SELECT * FROM (
#                 SELECT name, relative_velocity_kmph,
#                 dense_rank() OVER (ORDER BY relative_velocity_kmph DESC) rk
#                 FROM asteroids ,close_approach
#                 WHERE id=neo_reference_id
#             ) WHERE rk<=10
#         """,
# 
#         "Hazardous asteroids with >3 approaches to Earth": """
#             SELECT name, count(is_potentially_hazardous_asteroid) as times
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#             AND orbiting_body="Earth"
#             AND is_potentially_hazardous_asteroid=1
#             GROUP BY id
#             HAVING count(is_potentially_hazardous_asteroid)>3
#         """,
# 
#         "Month with most asteroid approaches": """
#             SELECT strftime('%Y-%m', close_approach_date) as month,
#                    count(DISTINCT name) as approaches
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#             GROUP BY strftime('%Y-%m', close_approach_date)
#             ORDER BY approaches DESC
#             LIMIT 1
#         """,
# 
#         "Fastest ever approach speed": """
#             SELECT name, max(relative_velocity_kmph) as max_speed
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#         """,
# 
#         "Asteroids by maximum estimated diameter": """
#             SELECT name, estimated_diameter_min_km, estimated_diameter_max_km
#             FROM asteroids
#             ORDER BY estimated_diameter_min_km DESC
#         """,
# 
#         "Closest approach to Earth (date & distance)": """
#             SELECT name, close_approach_date, miss_distance_km
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#             AND orbiting_body="Earth"
#             ORDER BY miss_distance_km ASC
#             LIMIT 10
#         """,
# 
#         "Asteroids with velocity > 50,000 km/h": """
#             SELECT name, relative_velocity_kmph
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#             AND orbiting_body="Earth"
#             AND relative_velocity_kmph>50000
#         """,
# 
#         "Approaches per month": """
#             SELECT strftime('%m', close_approach_date) as month,
#                    count(DISTINCT name) as approaches
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id
#             GROUP BY strftime('%m', close_approach_date)
#         """,
# 
#         "Asteroid with highest brightness (lowest magnitude)": """
#             SELECT name, min(absolute_magnitude_h) as brightness
#             FROM asteroids
#         """,
# 
#         "Hazardous vs Non-hazardous asteroids": """
#             SELECT count(DISTINCT name) as count,"Non-hazardous" as type
#             FROM asteroids
#             WHERE is_potentially_hazardous_asteroid=0
#             UNION
#             SELECT count(DISTINCT name) as count,"Hazardous" as type
#             FROM asteroids
#             WHERE is_potentially_hazardous_asteroid=1
#         """,
# 
#         "Asteroids closer than the Moon (<1 LD)": """
#             SELECT name, close_approach_date, miss_distance_lunar
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id AND miss_distance_lunar<1
#         """,
# 
#         "Asteroids within 0.05 AU": """
#             SELECT name, astronomical
#             FROM asteroids ,close_approach
#             WHERE id=neo_reference_id AND astronomical<0.05
#         """
#     }
# 
#     # Dropdown automatically triggers query
#     choice = st.selectbox("Choose a query", list(queries.keys()))
# 
#     # Run selected query immediately
#     q = queries[choice]
#     df = pd.read_sql(q, conn)
# 
#     if df.empty:
#         st.warning("⚠️ No results for this query.")
#     else:
#         st.subheader(f"📊 Results: {choice}")
#         st.dataframe(df, width=1400)
# 
#

# 3. Run Streamlit app with ngrok
from pyngrok import ngrok

# Kill old tunnels if any
ngrok.kill()

# Start new tunnel
public_url = ngrok.connect(8501)
print("👉 Streamlit app is live at:", public_url)

!streamlit run asteroid.py --server.port 8501 & sleep 3

!ngrok config add-authtoken 32MLV8qlH8ujGxgh9X9O6c2feWr_76QTRbQe6fxSQYEPUd7bX